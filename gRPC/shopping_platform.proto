syntax = "proto3";

// Define messages for seller registration.
message SellerRegistrationRequest {
  string address = 1;
  string uuid = 2;
}

message SellerRegistrationResponse {
  enum Status {
    SUCCESS = 0;
    FAIL = 1;
  }
  Status status = 1;
}

// Define messages for selling items.
message SellItemRequest {
  string product_name = 1;
  enum Category {
    ELECTRONICS = 0;
    FASHION = 1;
    OTHERS = 2;
  }
  Category category = 2;
  int32 quantity = 3;
  string description = 4;
  string seller_address = 5;
  string price = 6;
  string seller_uuid = 7;
}

message SellItemResponse {
  enum Status {
    SUCCESS = 0;
    FAIL = 1;
  }
  Status status = 1;
  string item_id = 2;
}

// Define messages for updating items.
message UpdateItemRequest {
  string item_id = 1;
  string new_price = 2;
  int32 new_quantity = 3;
  string seller_address = 4;
  string seller_uuid = 5;
}

message UpdateItemResponse {
  enum Status {
    SUCCESS = 0;
    FAIL = 1;
  }
  Status status = 1;
}

// Define messages for deleting items.
message DeleteItemRequest {
  string item_id = 1;
  string seller_address = 2;
  string seller_uuid = 3;
}

message DeleteItemResponse {
  enum Status {
    SUCCESS = 0;
    FAIL = 1;
  }
  Status status = 1;
}

// Define messages for displaying seller items.
message DisplaySellerItemsRequest {
  string seller_address = 1;
  string seller_uuid = 2;
}

message DisplaySellerItemsResponse {
  message ItemDetails {
    string item_id = 1;
    string price = 2;
    string product_name = 3;
    enum Category {
      ELECTRONICS = 0;
      FASHION = 1;
      OTHERS = 2;
    }
    Category category = 4;
    string description = 5;
    int32 quantity_remaining = 6;
    float rating = 7;
    string seller = 8;
  }
  repeated ItemDetails items = 1;
}

// Define messages for searching items.
message SearchItemRequest {
  string item_name = 1;
  enum Category {
    ELECTRONICS = 0;
    FASHION = 1;
    OTHERS = 2;
    ANY = 3;
  }
  Category category = 2;
}

message SearchItemResponse {
  message ItemDetails {
    string item_id = 1;
    string price = 2;
    string product_name = 3;
    enum Category {
      ELECTRONICS = 0;
      FASHION = 1;
      OTHERS = 2;
    }
    Category category = 4;
    string description = 5;
    int32 quantity_remaining = 6;
    float rating = 7;
    string seller = 8;
  }
  repeated ItemDetails items = 1;
}

// Define messages for buying items.
message BuyItemRequest {
  string item_id = 1;
  int32 quantity = 2;
  string buyer_address = 3;
}

message BuyItemResponse {
  enum Status {
    SUCCESS = 0;
    FAIL = 1;
  }
  Status status = 1;
}

// Define messages for adding to wishlist.
message AddToWishlistRequest {
  string item_id = 1;
  string buyer_address = 2;
}


message AddToWishlistResponse {
  enum Status {
    SUCCESS = 0;
    FAIL = 1;
  }
  Status status = 1;
}

// Define messages for rating items.
message RateItemRequest {
  string item_id = 1;
  string buyer_address = 2;
  int32 rating = 3;
}

message RateItemResponse {
  enum Status {
    SUCCESS = 0;
    FAIL = 1;
  }
  Status status = 1;
}
message NotifyClientRequest{
  string address = 1;
}

message NotifyClientResponse{
  enum Status {
    SUCCESS = 0;
    FAIL = 1;
  }
  Status status = 1;
  Notification notification = 2;
}
// Define messages for notifications.
message Notification {
  string message = 1;
}

// Define RPC services.
service SellerService {
  rpc RegisterSeller(SellerRegistrationRequest) returns (SellerRegistrationResponse);
  rpc SellItem(SellItemRequest) returns (SellItemResponse);
  rpc UpdateItem(UpdateItemRequest) returns (UpdateItemResponse);
  rpc DeleteItem(DeleteItemRequest) returns (DeleteItemResponse);
  rpc DisplaySellerItems(DisplaySellerItemsRequest) returns (DisplaySellerItemsResponse);
  rpc NotifyClient(NotifyClientRequest) returns (NotifyClientResponse);
}

service BuyerService {
  rpc SearchItem(SearchItemRequest) returns (SearchItemResponse);
  rpc BuyItem(BuyItemRequest) returns (BuyItemResponse);
  rpc AddToWishlist(AddToWishlistRequest) returns (AddToWishlistResponse);
  rpc RateItem(RateItemRequest) returns (RateItemResponse);
  rpc NotifyClient(NotifyClientRequest) returns (NotifyClientResponse);
}

